#!/usr/bin/env python3
import os, sys, subprocess, argparse
from django.core.wsgi import get_wsgi_application
from django.core.management import call_command
import runtests

"""
Master script that takes optional arguments and runs the correspoding script.
The script's purpose is to perform common tasks such as running the server,
making migrations, running tests, etc. Runs the server by default if no argument
is provided.

Note: This script assumes a UNIX-like environment.
"""

def print_cmd(cmd):
    """
    Method to print the shell command and arguments to stdout.

    Args:
        cmd (str): String representing command to be run
    Returns:
        None

    """
    print('Running: {0}\n'.format(' '.join(a for a in [cmd])))
    sys.stdout.flush()  # Make sure stdout is flushed before continuing.


def is_database_synchronized(database):
    connection = connections[database]
    connection.prepare_database()
    executor = MigrationExecutor(connection)
    targets = executor.loader.graph.leaf_nodes()
    if executor.migration_plan(targets):
        return False
    else:
        return True
def apply_migrations():
    print('Creating/updating database...')
    print_cmd('python manage.py makemigrations ZooMaps')
    call_command('makemigrations', 'ZooMaps')
    print_cmd('python manage.py migrate')
    call_command('migrate')

if __name__ == '__main__':
    proj_path = os.getcwd()
    # This is so Django knows where to find stuff.
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "GTech.settings")
    sys.path.append(proj_path)

    # This is so my local_settings.py gets loaded.
    os.chdir(proj_path)

    # This is so models get loaded.
    application = get_wsgi_application()

    # Import modules to allow for checking of database migrations
    from django.db.migrations.executor import MigrationExecutor
    from django.db import connections, DEFAULT_DB_ALIAS

    # Get the given command line argument, if there is one, representing the actions to perform.
    args = sys.argv[1:]
    cmd = None
    if args:
        cmd = args[0]

    # Run server if no argument provided
    if not cmd or cmd == 'server':
        # TODO check if migrations need to be performed, if they do, prompt user to perform them.
        if is_database_synchronized(DEFAULT_DB_ALIAS):
            # All migrations applied. Proceed with running server.
            # Chose not to print the explicit command w/ print_cmd() because Django will reload, thus printing it 2+ times.
            call_command('runserver',  '127.0.0.1:8000')
        else:
            # Unapplied migrations. Prompt user to run them. Then run the server
            while True:
                apply_migrations = input('Unapplied migrations detected. Would you like to run them (y/n)?').lower()
                while apply_migrations not in ('y', 'n'):
                    apply_migrations = input('Unapplied migrations detected. Would you like to run them (y/n)?')
                if apply_migrations == 'n':
                    print('Migrations will not be applied. Exiting')
                    break
                else:
                    # TODO: Refactor migrations commands into their own function
                    apply_migrations()
                    print('Migrations made. Running server')
                    call_command('runserver',  '127.0.0.1:8000')
    elif cmd == 'build':
        apply_migrations()
    elif cmd == 'test':
        # TODO: Fix the database/tests. The test database can't be created for some reason.
        print('Running test suite in tests directory')
        call_command('test', 'tests/')
    elif cmd == 'dev':
    # TODO (OPTIONAL): Run a linter over our code
        pass
    elif cmd == 'clean':
    # TODO (OPTIONAL): Clean extraneous files like '__init__.py' files, pycache directories, migrations files generated by Django, etc.
        while True:
            clean = input('You are about to delete migrations files. Would you like to proceed (y/n)?').lower()
            while clean not in ['y', 'n']:
                clean = input('You are about to delete migrations files. Would you like to proceed (y/n)?').lower()
            if clean == 'n':
                print('Files will not be deleted. Exiting.')
            else:
                print('Deleting files...')
                import delete_migrations
                print('Migrations files deleted. Exiting.')
    sys.exit()
